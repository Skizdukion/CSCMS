# Generated by Django 4.2.7 on 2025-06-29 09:32

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='District name', max_length=100, unique=True)),
                ('code', models.CharField(help_text='District code/abbreviation', max_length=10, unique=True)),
                ('boundary', django.contrib.gis.db.models.fields.PolygonField(blank=True, help_text='Geographic boundary of the district', null=True, srid=4326)),
                ('city', models.CharField(default='Ho Chi Minh City', help_text='City name', max_length=100)),
                ('population', models.IntegerField(blank=True, help_text='District population', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('area_km2', models.DecimalField(blank=True, decimal_places=2, help_text='District area in square kilometers', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('district_type', models.CharField(choices=[('urban', 'Urban District'), ('suburban', 'Suburban District'), ('rural', 'Rural District'), ('industrial', 'Industrial District'), ('tourist', 'Tourist District'), ('other', 'Other')], default='urban', help_text='Type of district', max_length=50)),
                ('avg_income', models.DecimalField(blank=True, decimal_places=2, help_text='Average income in VND', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether the district is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'District',
                'verbose_name_plural': 'Districts',
                'db_table': 'stores_district',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Current quantity in stock', validators=[django.core.validators.MinValueValidator(0)])),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Price per unit in VND', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_stock_level', models.IntegerField(help_text='Minimum stock level for reorder alerts', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_available', models.BooleanField(default=True, help_text='Whether the item is available for sale')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Inventory Entry',
                'verbose_name_plural': 'Inventory Entries',
                'db_table': 'stores_inventory',
                'ordering': ['store', 'item__category', 'item__name'],
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Store name', max_length=255)),
                ('address', models.TextField(help_text='Full address of the store')),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20, null=True)),
                ('email', models.EmailField(blank=True, help_text='Contact email', max_length=254, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='Geographic coordinates (latitude, longitude)', null=True, srid=4326)),
                ('store_type', models.CharField(choices=[('convenience', 'Convenience Store'), ('gas_station', 'Gas Station'), ('supermarket', 'Supermarket'), ('pharmacy', 'Pharmacy'), ('other', 'Other')], default='convenience', help_text='Type of store', max_length=50)),
                ('district', models.CharField(blank=True, help_text='District name', max_length=100, null=True)),
                ('city', models.CharField(default='Ho Chi Minh City', help_text='City name', max_length=100)),
                ('opening_hours', models.CharField(blank=True, help_text="Store opening hours (e.g., '8:00-22:00')", max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the store is currently active')),
                ('rating', models.DecimalField(blank=True, decimal_places=2, help_text='Store rating (0-5)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('district_obj', models.ForeignKey(blank=True, help_text='District object reference', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stores', to='stores.district')),
            ],
            options={
                'verbose_name': 'Store',
                'verbose_name_plural': 'Stores',
                'db_table': 'stores_store',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the item', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Item description', null=True)),
                ('category', models.CharField(choices=[('beverages', 'Beverages'), ('snacks', 'Snacks'), ('dairy', 'Dairy'), ('frozen', 'Frozen Foods'), ('household', 'Household'), ('personal_care', 'Personal Care'), ('other', 'Other')], default='other', help_text='Item category', max_length=50)),
                ('brand', models.CharField(blank=True, help_text='Brand name', max_length=100, null=True)),
                ('barcode', models.CharField(blank=True, help_text='Product barcode', max_length=50, null=True, unique=True)),
                ('unit', models.CharField(choices=[('pieces', 'Pieces'), ('kg', 'Kilograms'), ('liters', 'Liters'), ('boxes', 'Boxes'), ('packs', 'Packs'), ('other', 'Other')], default='pieces', help_text='Unit of measurement', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the item is active in the system')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stores', models.ManyToManyField(related_name='items', through='stores.Inventory', to='stores.store')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
                'db_table': 'stores_item',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.AddField(
            model_name='inventory',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventories', to='stores.item'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventories', to='stores.store'),
        ),
        migrations.AddIndex(
            model_name='district',
            index=models.Index(fields=['name'], name='stores_dist_name_310465_idx'),
        ),
        migrations.AddIndex(
            model_name='district',
            index=models.Index(fields=['code'], name='stores_dist_code_1c3739_idx'),
        ),
        migrations.AddIndex(
            model_name='district',
            index=models.Index(fields=['district_type'], name='stores_dist_distric_4f7eca_idx'),
        ),
        migrations.AddIndex(
            model_name='district',
            index=models.Index(fields=['is_active'], name='stores_dist_is_acti_6b0cca_idx'),
        ),
        migrations.AddIndex(
            model_name='district',
            index=models.Index(fields=['city', 'district_type'], name='stores_dist_city_81b77f_idx'),
        ),
        migrations.AddIndex(
            model_name='district',
            index=models.Index(fields=['is_active', 'district_type'], name='stores_dist_is_acti_55a4e4_idx'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['name'], name='stores_stor_name_988b60_idx'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['district'], name='stores_stor_distric_d13126_idx'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['store_type'], name='stores_stor_store_t_93515a_idx'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['is_active'], name='stores_stor_is_acti_12939d_idx'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['city', 'district'], name='stores_stor_city_19b562_idx'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['store_type', 'is_active'], name='stores_stor_store_t_261f92_idx'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['district_obj', 'store_type'], name='stores_stor_distric_4ff339_idx'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['is_active', 'store_type', 'city'], name='stores_stor_is_acti_784a9f_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['name'], name='stores_item_name_378ad5_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['category'], name='stores_item_categor_170904_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['is_active'], name='stores_item_is_acti_e73635_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['category', 'is_active'], name='stores_item_categor_4d11cf_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['brand', 'category'], name='stores_item_brand_deb63d_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['store', 'item'], name='stores_inve_store_i_163f37_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['is_available'], name='stores_inve_is_avai_5158d2_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['item', 'is_available'], name='stores_inve_item_id_68b47b_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['store', 'is_available'], name='stores_inve_store_i_da32a2_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['store', 'item', 'is_available'], name='stores_inve_store_i_5fddf3_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['quantity'], name='stores_inve_quantit_d2778a_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['min_stock_level'], name='stores_inve_min_sto_b134b2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='inventory',
            unique_together={('store', 'item')},
        ),
    ]
